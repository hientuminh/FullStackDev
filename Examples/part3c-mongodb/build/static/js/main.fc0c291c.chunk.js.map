{"version":3,"sources":["services/notes.js","components/Note.js","App.js","index.js"],"names":["request","axios","get","nonExisting","id","content","date","important","then","response","data","concat","newObject","post","put","Note","note","toggleImportance","label","onClick","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changeNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","console","log","target","placeholder","type","ReactDOM","render","document","getElementById"],"mappings":"8MAyBe,EArBA,WACb,IAAMA,EAAUC,IAAMC,IAHR,cAIRC,EAAc,CAClBC,GAAI,IACJC,QAAS,mCACTC,KAAM,2BACNC,WAAW,GAEb,OAAOP,EAAQQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAOR,OAaxC,EAVA,SAAAS,GAEb,OADgBX,IAAMY,KAdR,aAcsBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACN,EAAIQ,GAElB,OADgBX,IAAMa,IAAN,UAnBF,aAmBE,YAAwBV,GAAMQ,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCR5BK,EAZF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACbC,EAAQF,EAAKT,UACf,qBAAuB,iBAE3B,OACE,4BACGS,EAAKX,QACN,4BAAQc,QAASF,GAAmBC,KC4E3BE,EAhFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,IAEGrB,MAAK,SAAAsB,GACJP,EAASO,QAEZ,IAEH,IAsBMC,EAAcL,EAChBJ,EACAA,EAAMU,QAAO,SAAAhB,GAAI,OAAuB,IAAnBA,EAAKT,aAwB9B,OACE,6BACE,qCACA,6BACE,4BAAQY,QAAS,kBAAMQ,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAfeK,EAAYE,KAAI,SAAAjB,GAAI,OACrC,kBAAC,EAAD,CACEkB,IAAKlB,EAAKZ,GACVY,KAAMA,EACNC,iBAAkB,kBAnBK,SAAAb,GACzB,IAAMY,EAAOM,EAAMa,MAAK,SAAAC,GAAC,OAAIA,EAAEhC,KAAOA,KAChCiC,EAAU,eAAQrB,EAAR,CAAcT,WAAYS,EAAKT,YAE/CsB,EACUzB,EAAIiC,GACX7B,MAAK,SAAA8B,GACJf,EAASD,EAAMW,KAAI,SAAAjB,GAAI,OAAIA,EAAKZ,KAAOA,EAAKY,EAAOsB,SAEpDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OAAczB,EAAKX,QAAnB,sCACLkB,EAASD,EAAMU,QAAO,SAAAI,GAAC,OAAIA,EAAEhC,KAAOA,SAQdsC,CAAmB1B,EAAKZ,WAchD,0BAAMuC,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBzC,QAASmB,EACTlB,MAAM,IAAIyC,MAAOC,cACjBzC,UAAW0C,KAAKC,SAAW,GAC3B9C,GAAIkB,EAAM6B,OAAS,GAGrBtB,EACUiB,GACPtC,MAAK,SAAA8B,GACJf,EAASD,EAAMX,OAAO2B,IACtBb,EAAW,SA+CX,2BAAO2B,MAAO5B,EAAS6B,SA3CJ,SAACT,GACxBU,QAAQC,IAAIX,EAAMY,OAAOJ,OACzB3B,EAAWmB,EAAMY,OAAOJ,QAyC+BK,YAAY,qBAC/D,4BAAQC,KAAK,UAAb,WClERC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.fc0c291c.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n","import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n","import React, {useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\n\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changeNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changeNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        alert(`the note '${note.content}' was already deleted from server`)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} placeholder=\"Enter somethings\"/>\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\n// axios.get('http://localhost:3001/notes').then(response => {\n//   const notes = response.data\n//   ReactDOM.render(\n//     <App notes={notes} />,\n//     document.getElementById('root')\n//   )\n// })\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}