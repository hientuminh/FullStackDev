{"ast":null,"code":"import _slicedToArray from \"/Users/tuminhhien/Learning/FullStackDev/Exercises/part1/unicafe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tuminhhien/Learning/FullStackDev/Exercises/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  onClick,\n  text\n}) => {\n  return React.createElement(\"button\", {\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, text);\n};\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad\n}) => {\n  if (good === 0 && neutral === 0 && bad === 0) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, \"Statistics\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"No feedback given\"));\n  }\n\n  let all = good + bad + neutral;\n  let average = 0;\n  let positive = '0%';\n\n  if (good || bad || neutral) {\n    average = ((good - bad) / all).toFixed(1);\n    positive = (good * 100 / all).toFixed(1) + '%';\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Statistics\"), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(Statistic, {\n    text: \"good\",\n    value: good,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"neutral\",\n    value: neutral,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"bad\",\n    value: bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"average\",\n    value: average,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(Statistic, {\n    text: \"positive\",\n    value: positive,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }))));\n};\n\nconst Statistic = ({\n  text,\n  value\n}) => {\n  return React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, text), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, value));\n};\n\nconst App = () => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  const handleGood = () => {\n    setGood(good + 1);\n  };\n\n  const handleBad = () => {\n    setBad(bad + 1);\n  };\n\n  const handleNeutral = () => {\n    setNeutral(neutral + 1);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"give feedback\"), React.createElement(Button, {\n    onClick: handleGood,\n    text: \"Good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleNeutral,\n    text: \"Neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleBad,\n    text: \"Bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/tuminhhien/Learning/FullStackDev/Exercises/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","onClick","text","Statistics","good","neutral","bad","all","average","positive","toFixed","Statistic","value","App","setGood","setNeutral","setBad","handleGood","handleBad","handleNeutral","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAD,KAAqB;AAClC,SACE;AAAQ,IAAA,OAAO,EAAED,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BC,IAA3B,CADF;AAGD,CAJD;;AAMA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,OAAP;AAAgBC,EAAAA;AAAhB,CAAD,KAA0B;AAC3C,MAAIF,IAAI,KAAK,CAAT,IAAcC,OAAO,KAAK,CAA1B,IAA+BC,GAAG,KAAK,CAA3C,EAA8C;AAC5C,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,CADF;AAMD;;AACD,MAAIC,GAAG,GAAGH,IAAI,GAAGE,GAAP,GAAaD,OAAvB;AACA,MAAIG,OAAO,GAAG,CAAd;AACA,MAAIC,QAAQ,GAAG,IAAf;;AACA,MAAIL,IAAI,IAAIE,GAAR,IAAeD,OAAnB,EAA4B;AAC1BG,IAAAA,OAAO,GAAG,CAAC,CAACJ,IAAI,GAAGE,GAAR,IAAeC,GAAhB,EAAqBG,OAArB,CAA6B,CAA7B,CAAV;AACAD,IAAAA,QAAQ,GAAG,CAACL,IAAI,GAAC,GAAL,GAAWG,GAAZ,EAAiBG,OAAjB,CAAyB,CAAzB,IAA8B,GAAzC;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,MAAhB;AAAuB,IAAA,KAAK,EAAEN,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,SAAhB;AAA0B,IAAA,KAAK,EAAEC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,KAAhB;AAAsB,IAAA,KAAK,EAAEC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,SAAhB;AAA0B,IAAA,KAAK,EAAEE,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,UAAhB;AAA2B,IAAA,KAAK,EAAEC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CAFF,CADF;AAcD,CA/BD;;AAiCA,MAAME,SAAS,GAAG,CAAC;AAACT,EAAAA,IAAD;AAAOU,EAAAA;AAAP,CAAD,KAAmB;AACnC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKV,IAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKU,KAAL,CAFF,CADF;AAMD,CAPD;;AASA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBACQf,QAAQ,CAAC,CAAD,CADhB;AAAA;AAAA,QACTM,IADS;AAAA,QACHU,OADG;;AAAA,qBAEchB,QAAQ,CAAC,CAAD,CAFtB;AAAA;AAAA,QAETO,OAFS;AAAA,QAEAU,UAFA;;AAAA,qBAGMjB,QAAQ,CAAC,CAAD,CAHd;AAAA;AAAA,QAGTQ,GAHS;AAAA,QAGJU,MAHI;;AAKhB,QAAMC,UAAU,GAAG,MAAM;AACvBH,IAAAA,OAAO,CAACV,IAAI,GAAG,CAAR,CAAP;AACD,GAFD;;AAGA,QAAMc,SAAS,GAAG,MAAM;AACtBF,IAAAA,MAAM,CAACV,GAAG,GAAI,CAAR,CAAN;AACD,GAFD;;AAGA,QAAMa,aAAa,GAAG,MAAM;AAC1BJ,IAAAA,UAAU,CAACV,OAAO,GAAI,CAAZ,CAAV;AACD,GAFD;;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEY,UAAjB;AAA6B,IAAA,IAAI,EAAC,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEE,aAAjB;AAAgC,IAAA,IAAI,EAAC,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAED,SAAjB;AAA4B,IAAA,IAAI,EAAC,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAME,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEd,IAAlB;AAAwB,IAAA,OAAO,EAAEC,OAAjC;AAA0C,IAAA,GAAG,EAAEC,GAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAzBD;;AA2BAP,QAAQ,CAACqB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = ({onClick, text}) => {\n  return (\n    <button onClick={onClick}>{text}</button>\n  )\n}\n\nconst Statistics = ({good, neutral, bad}) => {\n  if (good === 0 && neutral === 0 && bad === 0) {\n    return (\n      <div>\n        <h3>Statistics</h3>\n        <h4>No feedback given</h4>\n      </div>\n    )\n  }\n  let all = good + bad + neutral;\n  let average = 0;\n  let positive = '0%';\n  if (good || bad || neutral) {\n    average = ((good - bad) / all).toFixed(1)\n    positive = (good*100 / all).toFixed(1) + '%'\n  }\n\n  return (\n    <div>\n      <h3>Statistics</h3>\n      <table>\n        <tbody>\n          <Statistic text=\"good\" value={good}/>\n          <Statistic text=\"neutral\" value={neutral}/>\n          <Statistic text=\"bad\" value={bad}/>\n          <Statistic text=\"average\" value={average}/>\n          <Statistic text=\"positive\" value={positive}/>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nconst Statistic = ({text, value}) => {\n  return (\n    <tr>\n      <td>{text}</td>\n      <td>{value}</td>\n    </tr>\n  )\n}\n\nconst App = () => {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const handleGood = () => {\n    setGood(good + 1)\n  }\n  const handleBad = () => {\n    setBad(bad +  1)\n  }\n  const handleNeutral = () => {\n    setNeutral(neutral +  1)\n  }\n\n  return (\n    <div>\n      <h3>give feedback</h3>\n      <Button onClick={handleGood} text='Good'/>\n      <Button onClick={handleNeutral} text='Neutral'/>\n      <Button onClick={handleBad} text='Bad'/>\n\n      <Statistics good={good} neutral={neutral} bad={bad}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"]},"metadata":{},"sourceType":"module"}