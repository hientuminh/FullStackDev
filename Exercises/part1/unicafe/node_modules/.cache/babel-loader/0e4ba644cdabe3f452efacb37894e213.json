{"ast":null,"code":"import _slicedToArray from \"/Users/tuminhhien/Learning/FullStackDev/Exercises/part1/unicafe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tuminhhien/Learning/FullStackDev/Exercises/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  onClick,\n  text\n}) => {\n  return React.createElement(\"button\", {\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, text);\n};\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad\n}) => {\n  let all = good + bad + neutral;\n  let average = 0;\n  let positive = 0;\n\n  if (good === 0 && neutral === 0 && bad === 0) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"Statistics\"), React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"No feedback given\"));\n  }\n\n  if (good || bad || neutral) {\n    average = (good - bad) / all;\n    positive = good / all;\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Statistics\"), React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"good\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, good)), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"neutral\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, neutral)), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"bad\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, bad)), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Good\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, good)), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"all\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, all)), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"average\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, average)), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"positive\"), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, positive))));\n};\n\nconst App = () => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  const handleGood = () => {\n    setGood(good + 1);\n  };\n\n  const handleBad = () => {\n    setBad(bad + 1);\n  };\n\n  const handleNeutral = () => {\n    setNeutral(neutral + 1);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"give feedback\"), React.createElement(Button, {\n    onClick: handleGood,\n    text: \"Good\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleNeutral,\n    text: \"Neutral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleBad,\n    text: \"Bad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(Statistics, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/tuminhhien/Learning/FullStackDev/Exercises/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","onClick","text","Statistics","good","neutral","bad","all","average","positive","App","setGood","setNeutral","setBad","handleGood","handleBad","handleNeutral","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = ({onClick, text}) => {\n  return (\n    <button onClick={onClick}>{text}</button>\n  )\n}\n\nconst Statistics = ({good, neutral, bad}) => {\n  let all = good + bad + neutral;\n  let average = 0;\n  let positive = 0;\n  if (good === 0 && neutral === 0 && bad === 0) {\n    return (\n      <div>\n        <h3>Statistics</h3>\n        <h4>No feedback given</h4>\n      </div>\n    )\n  }\n  if (good || bad || neutral) {\n    average = (good - bad) / all;\n    positive = good / all;\n  }\n\n  return (\n    <div>\n      <h3>Statistics</h3>\n      <table>\n        <tr>\n          <td>good</td>\n          <td>{good}</td>\n        </tr>\n        <tr>\n          <td>neutral</td>\n          <td>{neutral}</td>\n        </tr>\n        <tr>\n          <td>bad</td>\n          <td>{bad}</td>\n        </tr>\n        <tr>\n          <td>Good</td>\n          <td>{good}</td>\n        </tr>\n        <tr>\n          <td>all</td>\n          <td>{all}</td>\n        </tr>\n        <tr>\n          <td>average</td>\n          <td>{average}</td>\n        </tr>\n        <tr>\n          <td>positive</td>\n          <td>{positive}</td>\n        </tr>\n      </table>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const handleGood = () => {\n    setGood(good + 1)\n  }\n  const handleBad = () => {\n    setBad(bad +  1)\n  }\n  const handleNeutral = () => {\n    setNeutral(neutral +  1)\n  }\n\n  return (\n    <div>\n      <h3>give feedback</h3>\n      <Button onClick={handleGood} text='Good'/>\n      <Button onClick={handleNeutral} text='Neutral'/>\n      <Button onClick={handleBad} text='Bad'/>\n\n      <Statistics good={good} neutral={neutral} bad={bad}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"]},"metadata":{},"sourceType":"module"}